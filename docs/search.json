[
  {
    "objectID": "blog/posts/pdf-series-intro/index.html",
    "href": "blog/posts/pdf-series-intro/index.html",
    "title": "A Series of posts about PDF Parsing with AI",
    "section": "",
    "text": "This is an introductory post for a series on AI for analyzing PDFs. The posts in the series are listed below.\n\nTasks — On established benchmarking tasks in the literature\nDatasets — On available labeled and unlabeld PDF datasets\nModels — On published model architectures and weights\n\nThis list will be updated as the posts are written.\nI’m not an expert in document modeling, and I might make obvious or silly mistakes along the way. If you spot any, or have other questions or comments, please let me know!\nI’m writing this series as a way of documenting and organizing my preliminary explorations of this field; I hope it will useful to others as well.\n\nMotivation for catching up on state-of-the-art AI for PDFs\nThere’s a lot of medical information that only exists in PDF documents. Much of this information is old, from the days before the HITECH act kicked off the EHR revolution. While most newer clinical information is stored digitally somewhere, patients and even healthcare providers can often access it only in PDF form.\nI’ve long been interested in pulling medical data out of scanned PDF documents. Part of this is a personal interest — I have a stack of physical documents representing decades of my family’s medical histories.\nBut I also have a professional interest in this problem. In nearly a decade of working on EHR-based precision medicine, I’ve seen many situations in which critically important information is only accessible in PDF form.\nHistorically, extracting data from PDFs — especially scanned PDFs — has been tedious and error-prone. The biggest reason for this is that the PDF format is a visual rather than semantic encoding, and the spatial elements of PDF forms are rarely consistent between hospitals or clinics, or even within a single clinic over time.\nIt’s been about two years since I looked seriously at the state-of-the-art in PDF parsing, and a lot has changed in the world of AI in that time. I’m curious at how much closer we are to solving this problem in the era of massive open-source models.\n\n\nChallenges in extracting medical data from PDFs\nThe most general formulation of the task I’m interested is this:\n\nGiven a digital or scanned PDF, produce a structured FHIR document that contains all clinical information present in the original PDF, including clinical notes text.\n\nThe FHIR format is the industry standard format for storing and transfering clinical information.\nThere are a few challenges involved in this task that may be somewhat non-standard. It’s not necessary to solve all of these challenges for automated PDF parsing to be useful, but it will be interesting to see whether and how they’re addressed in existing models and benchmarking tasks. A few of these challenges are listed below.\n\nWe don’t know what information will be present in any given PDF.\nEach PDF may contain print and handwritten text.\nSome PDFs contain information on multiple procedures or tests across many distinct dates.\nThe same medical concept may have many different names.\n\nThere are also simpler tasks that might still be useful, such as extracting specific demographic or clinical information, or all clinical notes, from a document if available.\nIn the past, I’ve had some success running scanned documents through OCR, and then writing rules-based engines to pull vitals and labs values on the basis of spatial orientation and a few other factors.\nIt’s possible to write these rules in a relatively robust way, but a rules-based approach will always be fragile. First, medical forms are notorious for the variety of their spatial patterns. Second, because the OCR engine is not connected to any medical knowledge, it doesn’t know to correct for character- or token-level mistakes that are obvious in context. Making these corrections post-hoc is possible, but it adds substantial engineering and computational complexity. I’m especially curious about whether and how newer methods are integrating the linguistic and clinical context into the character recognition process.\nMy hope is that it will be possible to build on modern approaches and open-source models for PDF parsing to avoid rules-based systems, and to expand the kinds of information it’s possible to extract beyond just simple labs and vitals.\n\n\nOrder of posts in the series\nIn my experience, machine-learning methods often optimize for recongized and established benchmarking tasks in their sub-field. Understanding these tasks in detail from the start can help get sense for how the field is orienting itself. The next post in the series will be about relevant benchmarking tasks.\nNext, I’ll take a look at available datasets, as well as the feasibility of generating realistic data for training purposes. I find this is also helpful to do before reading about specific models, as it provides context for which objectives models are trained against, and when it’s possible to use self-supervised objectives.\nFinally, I’ll take a closer look at existing model architectures and open-source models. This part of the series may expand into several posts about testing out, fine-tuning or altering existing models."
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Posts",
    "section": "",
    "text": "Datasets for Document AI\n\n\n\n\n\n \n\n\n\n\n\n2024-02-09\n\n\n\n\n\n\n\n\n\n\n\n\nBenchmarking Tasks for Document Analysis\n\n\n\n\n\n \n\n\n\n\n\n2024-02-07\n\n\n\n\n\n\n\n\n\n\n\n\nA Series of posts about PDF Parsing with AI\n\n\n\n\n\n \n\n\n\n\n\n2024-02-06\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Noam Finkelstein",
    "section": "",
    "text": "Welcome to my website!\nI’ve spent the past decade working as a research scientist and engineer, primarily with clinical and biological data. Most recently, I was Head of Machine Learning at Delfina.\nI have a PhD in Computer Science and an ScM in Biostatistics from Johns Hopkins University, a Bachelor’s degree in Politics, Philosophy and Economics from the University of Oxford, and an Associates degree from Deep Springs College.\nI currently consult on AI research and applications, with a focus on clincal text and multi-modal EHR data.\nPlease feel free to get in touch."
  },
  {
    "objectID": "blog/posts/pdf-parsing-tasks/index.html",
    "href": "blog/posts/pdf-parsing-tasks/index.html",
    "title": "Benchmarking Tasks for Document Analysis",
    "section": "",
    "text": "This is the first post in a series on document parsing. I’m starting with a review of the benchmarking tasks because I want to understand which problems the field is orienting itself around, and how they relate to the challenges of extracting data from medical Documents.\nThe Accelerating Document AI post by Hugging Face covers some of the same ground. It was helpful context in writing this post and is worth a read.\nI’ll update this post as I come across new relevant tasks.\n\nDocument Question Answering\nThe document question answer task takes a document (PDF, image, or text) and a natural language question about the document as inputs, and produces a natural language answer to that question as an output.\nThe SQuAD2.0 dataset is a dataset in which the documents are text (extracted from wikipedia articles), the questions are English, and each question is paired with one or more related substrings of the corresponding document, or a special token indicating that the question is not answered in the document. There are ~500 documents, with ~100,000 question-answer pairs, and an additional ~50,000 adversarial questions that seem like they might be answered in the document but are not.\nThese documents are not PDFs, but might be used to train the language part of a PDF parsing model. In the worst case, they can be automatically converted to either scanned or digital PDF format with simulated visual artifacts.\nThe DocVQA collection has 4 distinct data sets. The DocVQA dataset has ~12,000 images with ~50,000 questions. Answers are also text extracted from the given document image. There are also similar, smaller datasets for Infographics (rather than documents) and handwritten documents. The final dataset groups documents into a collection, and any document in the collection can be used to answer the question.\nThe datasets can be downloaded here, after creation of an account.\nThe related PFL-DocVQA dataset, which has ~1,000,000 question-answer pairs on ~110,000 documents in total. At the moment, it seems only ~250,000 are public, but the remainder should be published soon.\nBoth https://rrc.cvc.uab.es and https://benchmarks.elsa-ai.eu, which host the DocVQA and PFL-DocVQA datasets respectively also have other interesting image-to-text datasets that might be useful for pre-training parts of a document model.\nThe DUDE data set contains ~5,000 PDF documents, with ~20,000 question-answer pairs. Questions can be extractive, in which case the answer must appear in the document, as for the datasets above, or abstractive, in which case the answer does not appear in the document.\nThe PDF-VQA is also a visual question answer dataset. The authors point to the multi-page documents as the main differentiator from DocVQA. It contains ~12,000 single-page documents, and ~1,100 multi-page documents. It also contains ~140,000 question-answer pairs, and information about the logical and spatial relation of words in the document. The “relational graphs” that encode these relationships are described in section 3.2 of the the accompanying paper.\n\n\nDocument Classification\nDocument classification is what it sounds like.\nThe RVL-CDIP dataset contains ~400,000 images of documents, each of which is assigned to one of 16 classes. The leaderboard is here, and can be downloaded here.\nThe Tobacco3482 dataset contains a ~3,492 images classified into 10 categories.\n\n\nDocument Layout Analysis\nThe layout analysis task aims to segment the documents into blocks, and classify each block. Common block labels are things like text, title, figure, table, etc.\nPubLayNet contains ~360,000 scientific papers drawn from PubMed. The dataset was constructed by “automatically matching XML representations and the contents” of the papers.\n\n\nDocument Parsing\nThe document parsing task aims to extract specific kinds of information from a document. In the case of forms, the goal is to extract key-value pairs, where each key is the name of a form-field, and the value is the user-entered text for that field. This is also sometimes called Key Information Extraction (KIE). Form and table parsing may be especially relevant to pulling information from medical records.\n\nForms Parsing\nThe Form Understanding from Noisy Scanned Documents (FUNDS) dataset has ~200 forms, with information about words and their locations, semantic entities — collections of related words —, and relations links between key-value pairs. Here is a nice summary-by-example of the data available on each form.\nThe related XFUND dataset extends this idea to documents in other languages. The dataset repository doesn’t have much information, but it’s described in the LayoutXLM paper. XFUND contains ~1,400 annotated forms, at ~200 per language. The dataset contains standard OCR data (i.e. words with bounding boxes), as well as semantically significant sets of words, each of which is called a semantic entity. It also contains annotated key-value pairs; a major goal is identifying the value associated with a given key.\n\n\nTable parsing\nThe PubTables-1M dataset contains ~575,000 pages, with a total of ~950,000 fully annotated tables. Table annotations include column headers and projected row headers, which are used to subdivide the table into vertical sections (see the linked image for an example). The dataset can also be used to learn to identify tables in documents.\nThe FinTabNet dataset “contains complex tables from the annual reports of S&P 500 companies with detailed table structure annotations”. It has ~90,000 pages with ~110,000 tables. The annotations here seem to just indicate a bounding box for each table, and a bounding box for each cell in the table. See the bottom of this notebook for examples. There is also an improved version called FinTabNet.c available on hugging face.\nOn first look, it doesn’t seem that either dataset includes a class for the kinds of notes that often appear in lab test reports (example 1, example 2). These kinds of notes often disrupt table recognition, as the same column headers apply above and below the note. I’ve had trouble in the past where table identifiers either considered the parts of a table separated by a note to be distinct tables, or else only recognized the part of the table that precedes the note, as the remaining parts do not have identifiable column headers.\nBecause the FinTabNet does not contain semantic information about table structure, models trained on it might be better able to recognize the notes as distinct cells; this will be interesting to explore.\nThere is also the ICDAR2013 table competition dataset, which is available in corrected form on hugging face. The dataset is described in this paper. It contains table location and structure information.\nA summary of these three datasets, as well as interesting commenatry about using them together, can be found here.\n\n\nReceipts Parsing\nThe SROIE dataset has ~1,000 receipt images. Each receipt is annotated with standard word / bounding box information, as well as a number of key-value pairs (the example keys given are company, date, address, and total).\nThe CORD dataset has ~1,0000 receipts. Each receipt is annotated with word / bounding box information, as well as line-level and receipt-level classifications.\n\n\nDatasets in other languages\nI’ll focus on English datasets for now, both because I can read English and because the documents I’m interested in working with are in English. There are interesting datasets in other languages, especially in Chinese. In particular, the HUSTL-CELL dataset looks relevant to key information extraction, and is primarily in Chinese.\n\n\n\nConclusion\nThis post is meant to provide an overview of the kinds of tasks that are currently used to evaluate methods for Document AI. The corresponding datasets can be used for training or fine-tuning as well.\nMy overall impression is that there is low availability of large, high-quality annotated datasets, especially for the parsing-based tasks. This seems to be a bottleneck for training, though perhaps less so for evaluation.\nIn the next post in the series, we’ll look at unlabeled datasets that can be used for self-supervised pre-training. I will be especially interested in methods for generating synthetic labeled data. For medical document information extraction, it may be relevant to see if plausible documents of varied structures can be created using synthetic FHIR data from Synthea."
  },
  {
    "objectID": "blog/posts/pdf-parsing-datasets/index.html",
    "href": "blog/posts/pdf-parsing-datasets/index.html",
    "title": "Datasets for Document AI",
    "section": "",
    "text": "This post will aim to provide an overview of real and synthetic datasets available for training Document AI models, with a focus on PDF documents. This is the second post in a series on document parsing. The previous post explored a number of datasets used in benchmarking tasks. This post will focus on datasets used to train foundation models, which requires more data than can exist in annotated datasets used in benchmarking.\n\nPDF datasets\nThere are a lot of easily-accessible PDFs in the world, so the main benefit of these datasets is that someone else has gone through the effort of collecting them in one place. Some PDF datasets are grouped by type.\nPDFs can be either scanned or native. Native PDFs contain digital information about characters and other visual markings. Scanned PDFs can be thought of as images, in the sense that they encode pixel-level data, but no higher-level information about the contents of the document. Native PDFs can easily be converted into “scanned” PDFs by applying visual filters that replicate artifacts from the scanning process. Augraphy is a great tool for this.\nThis idea is illustrated by the shabby pages dataset, which contains about ~6,000 native documents that have been artificially altered to simulate scanning or faxing. The advantage of this kind of manipulation is that the ground truth is available. The manipulations were done with Augraphy, linked above.\nThe DDI-100 dataset began with ~6,500 real document pages, and constructed various altered versions to arrive at ~100,000 page images.\nThe SFRS dataset has ~5,500 document images of tax forms from 1988. “The document images in this database appear to be real forms prepared by individuals, but the images have been automatically derived and synthesized using a computer.” In other words, the real original filled-in values seem to have been overwritten by synthetically generated values. This dataset can be thought of as a synthetic form parsing dataset. I haven’t been able to find a direct download link; I’ll update here when I hear back from the NIST “scientific contact” for the database.\nThe pdfs repository on github is a collection of ~1,700 “technically-oriented” PDFs. They seem to be mostly native PDFs, which could similarly be digitally altered.\nThe IIT CDIP dataset has a large number of legal documents from the state of Illinois’ “lawsuits against tobacco companies in the 1990s”. The website says there are ~7,000,000 documents, but other sources (such as the DONUT paper) put the number at ~11,000,000.\nThe kaggle dataset collection has a number of PDF datasets, most have in the hundreds of files. Note that the preceding link filters to datasets that have at least one PDF, but that PDF is sometimes a user agreement or a data dictionary. There is no way to filter to datasets that contain only PDF files.\nThe hugging face dataset collection allows for search by dataset name but not dataset type.\nFinally, the papers with code dataset list has similar functionality.\nAll three of those dataset collections seem to have relevant datasets, though they are mostly on the smaller side. Unlike the other two, papers with code does not host the datasets it lists.\n\nSynthetic PDF pipelines\nAs mentioned above, Augraphy can synthetically generate “scanned” or otherwise distorted PDFs from existing PDFs.\nSynthDoG was developed as part of the OCR-free Document Understanding Transformer paper. It produces synthetic documents by taking the following steps:\n\nrandomly select background images from imagenet\nrandomly select “paper texture” from photos of paper\napply random distortion to paper texture\ngenerate a random grid-based layout of text boxes of differing sizes and locations\nrandomly select font, style, and size of text\nfill the text boxes with text from wikipedia\npost-process the image\n\nSee appendix A.2 of the linked paper for more details. This seems like a neat pipeline.\nSynthDoG seems to be a more advanced version of synthtiger, which takes many of the same steps.\n\n\n\nIdeas for generating PDF documents for medical data extraction\nAt this point, I’m thinking about extracting medical data from PDFs as a mix of two kinds of tasks. The first is form parsing, which will be relevant when the PDF has distinct entry fields for specific pieces of information. This is often the case with demographic information, lab test results, vital signs, prescriptions, etc. The second is closer to question answering, which will be relevant when the information is contained in free-text clinical notes. This often happens when we’re interested in medical histories, the specifics of a procedure or radiology diagnosis, or patient symptoms.\nRegardless of how or whence we extract the information, the task is variation of Key Information Extraction (KIE). For each potential FHIR field, we would like to know if the field is present in the document, and if so what its value is.\nGenerating realistic medical PDFs will involve creating randomly generated plausible layouts for structured medical information of the type that can be generated by Synthea, and using LLMs to to generate plausible clinical notes that encode known pieces of information. Combining these elements with the synthetic data generation pipelines linked above, I think it might be possible to train a Document AI model for medical KIE.\n\n\nNext steps\nIn the next post, we’ll take a look at evaluating some pre-trained OCR and Document AI models on medical information extraction tasks. Depending on the results, we might explore creating realistic synthetic medical documents for improved medical KIE training."
  }
]