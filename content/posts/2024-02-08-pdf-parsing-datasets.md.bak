+++
title = "Datasets for Document AI"
+++

This post will aim to provide an overview of real and synthetic datasets available for training
Document AI models, with a focus on PDF documents. This is the second post in a
[series](@/posts/2024-02-06-pdf-parsing-series-intro.md) on document parsing. The [previous
post](@/posts/2024-02-07-pdf-parsing-tasks.md) about explored a number of datasets used in
benchmarking tasks. This post will focus on datasets used to train foundation models, which requires
more data than can exist in annotated datasets used in benchmarking.

#### PDF datasets

There are a lot of easily-accessible PDFs in the world, so the main benefit of these datasets is
that someone else has gone through the effort of collecting them in one place. Some PDF datasets are
grouped by type.

PDFs can be either scanned or native. Native PDFs contain digital information about characters and
other visual markings. Scanned PDFs can be thought of as images, in the sense that they encode
pixel-level data, but no higher-level information about the contents of the document. Native PDFs
can easily be converted into "scanned" PDFs by applying visual filters that replicate artifacts from
the scanning process. [Augraphy](https://github.com/sparkfish/augraphy) is a great tool for this.

This idea is illustrated by the [shabby pages](https://github.com/sparkfish/shabby-pages) dataset,
which contains about \~6,000 native documents that have been artificially altered to simulate
scanning or faxing. The advantage of this kind of manipulation is that the ground truth is
available. The manipulations were done with Augraphy, linked above.

The [DDI-100](https://github.com/machine-intelligence-laboratory/DDI-100) dataset began with \~6,500
real document pages, and constructed various altered versions to arrive at \~100,000 page images.

The [SFRS](https://www.nist.gov/srd/nist-special-database-2) dataset has \~5,500 document images of
tax forms from 1988. "The document images in this database appear to be real forms prepared by
individuals, but the images have been automatically derived and synthesized using a computer." In
other words, the real original filled-in values seem to have been overwritten by synthetically
generated values. This dataset can be thought of as a synthetic
[form parsing](@/posts/2024-02-07-pdf-parsing-tasks.md#forms-parsing) dataset. I haven't been able
to find a direct download link; I'll update here when I hear back from the NIST "scientific contact"
for the database.

The [pdfs](https://github.com/tpn/pdfs/) repository on github is a collection of \~1,700
"technically-oriented" PDFs. They seem to be mostly native PDFs, which could similarly be digitally
altered.

The [IIT CDIP](https://data.nist.gov/od/id/mds2-2531) dataset has a large number of legal documents
from the state of Illinois' "lawsuits against tabacco companies in the 1990s". The website says
there are \~7,000,000 documents, but other sources (such as the
[DONUT paper](https://arxiv.org/pdf/2111.15664.pdf)) put the number at \~11,000,000.

The [kaggle dataset collection](https://www.kaggle.com/search?q=PDF+data+datasetFileTypes%3Apdf+datasetSize%3Amedium+datasetSize%3Alarge) 
has a number of PDF datasets, most have in the hundreds of files. Note that the preceding link
filters to datasets that have at least one PDF, but that PDF is sometimes a user agreement or a data
dictionary. There is no way to filter to datasets that contain only PDF files.

The [hugging face dataset collection](https://huggingface.co/datasets?sort=downloads&search=PDF)
allows for search by dataset name but not dataset type.

Finally, the [papers with code](https://paperswithcode.com/datasets?q=PDF+Document&v=lst&o=match)
dataset list has similar functionality.

All three of those dataset collections seem to have relevant datasets, though they are mostly on the
smaller side. Unlike the other two, papers with code does not host the datasets it lists.

##### Synthetic PDF pipelines

As mentioned above, [Augraphy](https://github.com/sparkfish/augraphy) can synthetically generate
"scanned" or otherwise distored PDFs from existing PDFs.

[SynthDoG](https://github.com/clovaai/donut/tree/master/synthdog) was developed as part of the
[OCR-free Document Understanding Transformer](https://arxiv.org/pdf/2111.15664.pdf) paper. It
produces synthetic documents by taking the following steps:

- randomly select background images randomly from imagenet
- randomly select "paper texture" from photos of paper
- apply random distorition to paper texture
- generate a random grid-based layout of text boxes of differing sizes and locations
- randomly select font, style, and size of text
- fill the text boxes with text from wikipedia
- post-prcoess the image

See appendix A.2 of the linked paper for more details. This seems like a neat pipeline.

SynthDoG seems to be a more advanced version of [synthtiger](https://github.com/clovaai/synthtiger),
which takes many of the same steps.

#### Ideas for generating PDF documents for medical data extraction

At this point, I'm thinking about extracting medical data from PDFs as a mix of two kinds of tasks.
The first is [form parsing](@/posts/2024-02-07-pdf-parsing-tasks.md#forms-parsing), which will be
relevant when the PDF has distinct entry fields for specific pieces of information. This is often
the case with demographic information, lab test results, vital signs, prescriptions, etc. The second
is closer to 
[question answering](@/posts/2024-02-07-pdf-parsing-tasks.md#document-question-answering), which will
be relevant when the information is contained in free-text clinical notes. This often happens when
we're interested in medical histories, the specifics of a procedure or radiology diagnosis, or
patient symptoms.

Regardless of how or whence we extract the information, the task is variation of Key Information
Extraction (KIE). For each potential FHIR field, we would like to know if the field is present in
the document, and if so what its value is.

Generating realistic medical PDFs will involve creating randomly generated plausible layouts for
structured medical information of the type that can be generated by 
[Synthea](https://github.com/synthetichealth/synthea), and using LLMs to to generate plausible
clinical notes that encode known pieces of information. Combining these elements with the synthetic
data generation pipelines linked above, I tink it might be possible to train a Document AI model for
medical KIE.

#### Next steps

In the next post, we'll take a look at evaluating some pre-trained OCR and Document AI models on
medical information extraction tasks. Depending on the results, we might explore creating realistic
synthetic medical documents for improved medical KIE training.

